1) trigger trig_pur: generate a new pur# from SEQUENCE pur_seq’s NEXTVAL before new tuple is inserted into purchases table
trigger trig_sup: generate a new sup# from SEQUENCE sup _seq’s NEXTVAL before new tuple is inserted into supply table
trigger trig_log: generate a new log# from SEQUENCE log _seq’s NEXTVAL before new tuple is inserted into logs table

2) procedure show_employees: take no parameter and select all tuples from employees table and print info of each tuple using for loop
procedure show_customers: take no parameter and select all tuples from customers table and print info of each tuple using for loop
procedure show_products: take no parameter and select all tuples from products table and print info of each tuple using for loop
procedure show_ purchases: take no parameter and select all tuples from purchases table and print info of each tuple using for loop
procedure show_ suppliers: take no parameter and select all tuples from suppliers table and print info of each tuple using for loop
procedure show_ supply: take no parameter and select all tuples from table and print info of each tuple using for loop


3) For question 3, I created a procedure called report_monthly_sale.  It takes in one parameter: prod_id which is the same type as Products.pid.  The procedure will use a for loop where for each iteration, it will select Product.pname, Purchases.ptime converted to month and year, the sum of Purchases.qty, and the sum of Purchases.total_price.  These selections will be grouped by the month so that it will only select one row for each month.  Finally, in the for loop it will output the required information. The procedure catches the no_data_found exception in case the user enters an invalid pid.

4) procedure  add_purchase: insert into purchases table with eid, pid, cid and qoh receiving from user which are the same type with purchases.eid, purchases.pid, purchases.cid and purchases.qoh. pur# is generated by trigger trig_pur automatically, ptime is generated by sysdate, total_price is calculated from the original_price and discnt_rate of the product with the same pid.
procedure add_products: insert into products table with all content receiving from user.

5) For question 5, I created 4 triggers, one for each event.  The first trigger is insert_pur_tuple which executes after a tuple is inserted into purchases.  It will insert a tuple into the log with the required information.  The log# is obtained by called log_seq.nextval and the pur# is obtained by calling pur_seq.currval.
The second trigger is update_p_qoh which executes after a qoh value is updated in the products table.  It inserts a tuple into logs with the required information.  The pid is obtained by calling :old.pid.
The third trigger is update_c_visits which executes after visits_made is updated in the customers table.  It inserts a tuple into logs with the required information. The cid is obtained by calling :old.cid.
The fourth trigger is insert_s_tuple which executes when a tuple is inserted into the supply table.  It inserts a tuple into logs with the required information.  The seq# is obtained by calling sup_seq.currval.

6) trigger trig_negative_qoh: before a new purchase tuple being inserted, if qty greater than qoh of that products, exception will be raised and the operation will not be implemented with a exception message printing. 

7) For question 7, I created a trigger called qoh_after_purchase which executes when a tuple is inserted in the purchases table.  It will first update the qoh of the product purchased to qoh - :.new.qty. After that, it checks if the new qoh is lower than the qoh_threshold.  If it is, it will print that the qoh is too low and that supply is needed.  After that, inserts a tuple into the supply table.  The sid is fetched by using a cursor in case there are more than 1 tuple in supply with the same sid.  The qty supplied is 10 + M + qoh where M is the lowest number such that qoh + M > qoh_threshold.  Finally, it will update the qoh to the new value and print the new value.  After updating the qoh, After dealing with the qoh, the trigger will then add one to the visits_made of the customer who made the purchase.  Then, it will check if the purchase date is the same as last_visit_date by using trunc(date) to remove the time.  If it is not, it will change the last_visit_date to the purchase date.  
